#version 330

uniform sampler2D atlas;
uniform int tileCount;
uniform int tileSize;

uniform float fogDistance;
uniform vec4 fogColor;

uniform float time;

out vec4 out_color;

in vec3 ex_pos;
flat in int ex_voxel;
in vec3 ex_normal;
in vec4 view_pos;

in vec3 voxel_pos;

uniform usamplerBuffer lightMap;

uniform usamplerBuffer lightMapXP;
uniform usamplerBuffer lightMapXM;

uniform usamplerBuffer lightMapYP;
uniform usamplerBuffer lightMapYM;

uniform usamplerBuffer lightMapZP;
uniform usamplerBuffer lightMapZM;


void main() {    


    vec3 offset = ex_normal * 0.5;

    int i = int(floor(voxel_pos.x+offset.x));
    int j = int(floor(voxel_pos.y+offset.y));
    int k = int(floor(voxel_pos.z+offset.z));

    float lightLevel = texelFetch(lightMap, k*31*31 + j*31 + i).r;  
    float lightLevelXM = texelFetch(lightMapXM, k*31*31 + j*31 + i + 31).r;  
    float lightLevelXP = texelFetch(lightMapXP, k*31*31 + j*31 + i - 31).r;  
    float lightLevelYM = texelFetch(lightMapYM, k*31*31 + (j+31)*31 + i).r;  
    float lightLevelYP = texelFetch(lightMapYP, k*31*31 + (j-31)*31 + i).r;  
    float lightLevelZM = texelFetch(lightMapZM, (k+31)*31*31 + j*31 + i).r;  
    float lightLevelZP = texelFetch(lightMapZP, (k-31)*31*31 + j*31 + i).r;  
    float light = lightLevel;

    if(i<0){
        light = lightLevelXM;
    }
    else if(i>=31){
        light = lightLevelXP;
    }
    else if(j<0){
        light = lightLevelYM;
    }
    else if(j>=31){
        light = lightLevelYP;
    }
    else if(k<0){
        light = lightLevelZM;
    }
    else if(k>=31){
        light = lightLevelZP;
    }

    

    vec2 tileOffset = vec2(ex_voxel % tileCount, (ex_voxel%256) / tileCount);
    tileOffset = tileOffset / tileSize;
    
    vec2 tileUV = vec2(dot(ex_normal.zxy, ex_pos), dot(ex_normal.yzx, ex_pos));
    tileUV.x = tileUV.x + sin(tileUV.y*10.+time*0.005)*0.01;
    tileUV.y = tileUV.y + sin(tileUV.x*10.+time*0.005)*0.01;
    vec2 texCoord = tileOffset + fract(tileUV) / tileSize;

    light = clamp( light / 32.0,0.0,1.0);
    
    vec4 texelAll = texture2D(atlas, texCoord)*light;
    texelAll.a = 0.5;

    float minFogDist = fogDistance*0.5;
	float fogFactor = clamp((length(-view_pos)-minFogDist)/(fogDistance-minFogDist),0.0,1.0);

    out_color = mix(texelAll, fogColor, fogFactor);
}
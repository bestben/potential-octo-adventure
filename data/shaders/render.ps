#version 330

uniform sampler2D atlas;

uniform int tileCount;
uniform int tileSize;

uniform float fogDistance;
uniform vec3 fogColor;

out vec4 out_color;

in vec3 ex_pos;

flat in int ex_voxel;
in vec3 ex_normal;
in vec4 view_pos;

in float lightVar;


void main() {

    vec2 tileOffset = vec2(ex_voxel % tileCount, (ex_voxel%256) / tileCount);
    tileOffset = tileOffset / tileSize;

    vec2 texCoordX = tileOffset + fract(-ex_pos.zy) / tileSize;
    vec2 texCoordY = tileOffset + fract(-ex_pos.xz) / tileSize;
    vec2 texCoordZ = tileOffset + fract(-ex_pos.xy) / tileSize;
    
    vec4 sampleX = texture2D(atlas, texCoordX); // Project along x axis
    vec4 sampleY = texture2D(atlas, texCoordY); // Project along y axis
    vec4 sampleZ = texture2D(atlas, texCoordZ); // Project along z axis
    
    vec4 texelAll = sampleX * abs(ex_normal.x) + sampleY * abs(ex_normal.y) + sampleZ * abs(ex_normal.z);

    float light = clamp(lightVar/32.0, 0.0, 1.0);

    light = 1.0 - pow(1.0-light, 0.25);
    light = 0.5; // temporaire temps que l'éclairage est désactivé

    float dotProd = clamp(dot(ex_normal, -normalize(vec3(0.5,-1.0,0.0))), 0.5,1.0);

	vec3 ambiant = texelAll.rgb * light * dotProd;

	float minFogDist = fogDistance*0.85;
	float fogFactor = clamp((length(-view_pos)-minFogDist)/(fogDistance-minFogDist),0.0,1.0);

    out_color = mix(vec4(ambiant,1.0), vec4(fogColor * light,1.0), fogFactor);

}